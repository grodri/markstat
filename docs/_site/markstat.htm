<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<style>
/* CSS for Stata Markdown */
body{padding:14px 28px;}
body, table {font-family: Helvetica, Arial, Sans-serif; font-size: 14px;}
h1, h2, h3, h4 {font-weight: normal; color: #3366cc}
h1 {font-size: 200%;}
h2 {font-size: 150%;}
h3 {font-size: 120%;}
h4 {font-size: 100%; font-weight:bold}
img.center {display:block; margin-left:auto; margin-right:auto}
.small{font-size:8pt;}
a {color: black;}
a:visited {color: #808080;}
a.plain {text-decoration:none;}
a.plain:hover {text-decoration:underline;}
.em {font-weight:bold;}
pre, code {font-family: "lucida console", monospace;}
pre.stata {font-size:13px; line-height:13px;}
pre {padding:8px; border:1px solid #c0c0c0; border-radius:8px; background-color:#fdfdfd;}
code {color:#3366cc; background-color:#fafafa;}
pre code { color:black; background-color:white}
/* Added for Pandoc */
div.figure > img {display:block; margin:auto}
p.caption {text-align:center; font-weight:bold; color:#3366cc;}
h1.title {text-align:center; margin-bottom:0}
h2.author {font-style:italic; text-align:center;margin-top:4px;margin-bottom:0}
h3.date {text-align:center;margin-top:4px; margin-bottom:0}
/* Tables*/
table { margin:auto; border-collapse:collapse; 
 border-top:1px solid black; border-bottom:1px solid black;}
table caption { margin-bottom:1ex;}
th, td { padding:4px 6px;}
thead tr:first-child th {padding-top:6px}
thead tr:last-child  th {padding-bottom:6px}
tbody tr:first-child td {border-top:1px solid black;padding-top:6px}
tbody tr:last-child  td {padding-bottom:6px;}
</style>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="generator" content="pandoc" />
  <meta name="author" content="Germán Rodríguez, Princeton University" />
  <meta name="keywords" content="<p>markdown, pandoc, latex, literate programming, dynamic documents, reproducible research.</p>" />
  <title>Literate Data Analysis with Stata and Markdown</title>
  <style type="text/css">code{white-space: pre;}</style>
</head>
<body>
<div id="header">
<h1 class="title">Literate Data Analysis with Stata and Markdown</h1>
<h2 class="author">Germán Rodríguez, Princeton University</h2>
<h3 class="date">3 March 2017</h3>
</div>
<h1 id="introduction">1 Introduction</h1>
<p>Donald Knuth, author of <em>The Art of Computer Programming</em> and the creator of TeX, is a strong believer in documenting computer programs. He argues that when we write a program we are not just providing instructions for the computer to complete a task, but also communicating to other human beings exactly what it is we are trying to do. He believes that we can achieve much higher documentation standards if we view programs as works of literature, hence his advocacy of “literate programming” <span class="citation">(Knuth 1992)</span>.</p>
<p>These ideas apply equally well, if not more forcefully, to the field of data analysis, where careful documentation of all the steps followed, including data processing, data analysis, and the production of tables and figures, is essential to help ensure reproducibility of results. The most efficient way to accomplish this objective is to integrate the data analysis code with the narrative that explains the steps taken and the results obtained, preferably in a single document, in an approach I like to call “literate data analysis”, a term coined by <span class="citation">Leisch (2002)</span>; see also <span class="citation">Rossini (2001)</span> for an early survey.</p>
<p>The purpose of this article is to introduce a Stata command that hopefully will help applied researchers do literate data analysis. The idea is quite simple. We prepare a file that uses Markdown to communicate with the reader and Stata to talk to the computer. Markdown is a simple markup language that is very easy to learn. And of course Stata you know. The input is a plain text file that can be edited using Stata’s code editor, which also means that we can select and run the Stata commands while we are authoring our piece. When the file is ready we run it through the <code>markstat</code> command, which <em>tangles</em> or separates the Markdown and Stata code, runs each in turn, and then <em>weaves</em> the outputs together into a nice web page or PDF file.</p>
<p>I believe this command will help us climb what <span class="citation">Barba (2016)</span> has called “the hard road to reproducible research”, encouraging and facilitating documentation of each stage of our work:</p>
<ul>
<li><p>At the data processing stage, instead of a few cryptic comments in a do file, we can describe all the steps used to wrangle the raw data into analysis variables, producing a nicely formatted and readable document.</p></li>
<li><p>At the data analysis stage we can include the code, explain the reasons for trying particular models, include output, tables and figures, and comment on the results, all without tedious and error-prone cutting and pasting.</p></li>
<li><p>At the presentation stage we can produce a report that focuses on the results, with an option to hide the actual commands used, so they are not shown in the final document.</p></li>
</ul>
<p>The command may also be used to produce teaching materials showing how to do statistical analysis with Stata, in which case we will probably want to include all the code in the resulting handout, web page or blog post.</p>
<p>In all cases, however, the original Stata Markdown script remains as a complete and reproducible record of exactly how everything was done.</p>
<p>Documents that combine code and annotations are often called <em>dynamic documents</em>, not because they are live or interactive as <span class="citation">Xie (2016)</span> has noted, but simply because if the data change, or if we want to tweak the code, all we need to do is rerun the input script and all the output will be updated automatically. There is a lot more to reproducible research than producing dynamic documents, see for example <span class="citation">Peng (2009)</span> for a short overview, but this is at least a step in the right direction. The R community has excellent tools for reproducible research, see the book by <span class="citation">Gangrud (2015)</span> for example, and part of my aim here is to help bring similar tools to the world of Stata.</p>
<p>My approach is different from lower-level commands that generate HTML or PDF output, such as the <code>ht</code> suite by <span class="citation">Quintó et al. (2012)</span> or Stata’s own PDF Mata classes. It is also different from solutions that produce publication-quality tables, often with an option to export to LaTeX, Word or Excel, such as <code>outreg</code> <span class="citation">(Gallup 1999)</span>, <code>outreg2</code> <span class="citation">(Wada 2005)</span>, <code>esttab</code> <span class="citation">(Jann 2005)</span> or <code>tabout</code> <span class="citation">(Watson 2016)</span>, although as we’ll see it can work with some of these. It is similar to approaches that embed HTML, LaTeX, or Markdown annotations in special comment blocks in Stata do files, such as <code>webdoc</code> <span class="citation">(Jann 2016b)</span>, <code>texdoc</code> <span class="citation">(Jann 2016a)</span>, <code>markdoc</code> <span class="citation">(Haghish 2016)</span>, or my earlier <code>weave</code>, but here I embed Stata code in Markdown, don’t require knowledge of HTML or LaTeX, and put a high premium on making the input script clean and readable “as is”, just like Markdown itself. My solution is thus closer in spirit to (if less ambitious than) R’s <code>rmarkdown</code> <span class="citation">(Allaire et al. 2016)</span>, which builds on <code>knitr</code> <span class="citation">(Xie 2016)</span>, itself a descendant of <code>sweave</code> <span class="citation">(Leisch 2002)</span>, all of these R functions. It is possible to weave Stata code with <code>knitr</code> in R, as noted for example by <span class="citation">Hemken (2015)</span>, but I don’t require running R to run Stata.</p>
<p>Perhaps it is now time for an example.</p>
<h1 id="sample-input">2 Sample Input</h1>
<p>The basic idea here is to prepare a file that contains annotations written in Markdown and Stata code, which appears in blocks indented one tab or four spaces, as in the following example</p>
<pre><code>Stata Markdown
==============

Let us read the fuel efficiency data that ships with Stata

    sysuse auto, clear

To study how fuel efficiency depends on weight it is useful to transform
the dependent variable from “miles per gallon” to “gallons per 100
miles”

    gen gphm = 100/mpg

We then obtain a fairly linear relationship

    twoway scatter gphm weight || lfit gphm weight /// 
        ytitle(Gallons per 100 Miles) legend(off) 
    graph export auto.png, width(500) replace

![Fuel Efficiency by Weight](auto.png)

The regression equation estimated by OLS is

    regress gphm weight

Thus, a car that weighs 1,000 pounds more than another requires on
average an extra 1.4 gallons to travel 100 miles.

That’s all for now!</code></pre>
<p>Saving the file as <code>auto.stmd</code> and running <code>markstat using auto</code> generates the web page shown at <a href="http://data.princeton.edu/stata/markdown/auto">data.princeton.edu/stata/markdown/auto</a>, with a screen capture shown in Figure 1.</p>
<div class="figure">
<img src="auto-snip.png" alt="Screen Capture of auto.html" />
<p class="caption">Screen Capture of <code>auto.html</code></p>
</div>
<p>The <code>markstat</code> command extracts the Markdown and Stata code into separate <code>.md</code> and <code>.do</code> files, taking care to mark where the code blocks came from. It then runs the Markdown code through an external program called Pandoc, runs the do file through Stata, and then weaves all the output together into a beautiful web page.</p>
<p>There are options to generate a PDF file instead of HTML, and to use the MathJax library to render equations on a web page. But before I explain these options let me tell you a bit about Markdown and Pandoc.</p>
<h1 id="markdown">3 Markdown</h1>
<p>Markdown is a lightweight markup language invented by John Gruber. It is easy to write and, more importantly, it was designed to be readable “as is”, without intrusive markings. Yet it can easily be converted into valid HTML or PDF.</p>
<p>This section is a quick introduction to Markdown. Please refer to <span class="citation">Gruber (2004)</span>’s <span class="citation">(2004)</span> <em>Markdown: Basics</em> for more information. There is an ongoing effort to standardize Common Markdown, with reference implementations in C and JavaScript, visit <a href="http://commonmark.org">commonmark.org</a> for details.</p>
<p>In Markdown you create a <em>heading</em> by “underlining” your text using <code>===</code> for level 1 and <code>---</code> for level 2, as we did in our example. One can also define headings at levels one to six by starting a line with one to six hashmarks, as in <code>### A level 3 heading</code>.</p>
<p>You define a <em>paragraph</em> break by leaving a blank line. If you need a line break, end the line with two or more spaces (which are hard to see :), or end the line with <code>\</code>.</p>
<p>To indicate emphasis using an <em>italic</em> style wrap the text with one star or underscore, as in <code>*italic*</code> or <code>_italic_</code>. For strong emphasis using a <strong>bold</strong> font wrap the text with two stars or underscores, as in <code>**bold**</code> or <code>__bold__</code>. For a monospace font suitable for code wrap the text in backticks, typing <code>`regress`</code> to refer to the <code>regress</code> command.</p>
<p>Create a <em>list</em> by starting a line with <code>*</code>, <code>+</code>, or <code>-</code> for a bulleted/unordered list or <code>1.</code> for a numbered/ordered list. You add items to a list by starting a line with the same symbol or with a number. Items in ordered lists are numbered consecutively regardless of which numbers you use. To end the list you enter a blank line.</p>
<p>You can <em>link</em> to another document by putting the anchor in square brackets and the link in parentheses, as in <code>[GR’s website](http://data.princeton.edu)</code>.</p>
<p>To link to an <em>image</em> start with a bang, type a title in square brackets and the source of the image in parenthesis. For example <code>![Fuel Efficiency by Weight](auto.png)</code>.</p>
<p>An important feature of Markdown is that you can include HTML if you wish. For example we could have coded the image as <code>&lt;img src=auto.png/&gt;</code>, or a line break as <code>&lt;br/&gt;</code>. This is not recommended if the aim is to generate a PDF document.</p>
<h1 id="pandoc">4 Pandoc</h1>
<p>To convert Markdown to HTML (or other formats) you need a document converter. I find that Pandoc works very well and is easy to install, with binaries for Linux, Mac and Windows, so that’s what we’ll use. Please visit <a href="http:/pandoc.org/installing">pandoc.org/installing</a> to download and install the program, unless of course it is already installed in your system.</p>
<p>To tell Stata where Pandoc was installed we use the <code>whereis</code> command, available from the SSC archive, just type <code>ssc install whereis</code>. This command maintains a registry of ancillary programs. To register the location of Pandoc you type in Stata</p>
<pre><code>whereis pandoc full-path-to-pandoc-executable</code></pre>
<p>where the path should be quoted if it contains spaces.</p>
<p>For example on a Mac the full path may be <code>/usr/local/bin/pandoc</code> and on a Windows system it may be <code>&quot;c:\program files (x86)\pandoc\pandoc.exe&quot;</code>, but of course the location in your system may be different. If you need assistance finding the location of Pandoc try <code>help whereis</code> and read the section “Tips for Users”, which notes how you can use the Unix commands <code>which</code> and <code>whereis</code> or the Windows command <code>where</code> to help locate the file.</p>
<p>Subsequent calls to <code>whereis pandoc</code> return the registered location, which is how <code>markstat</code> can find it.</p>
<p>Pandoc implements several extensions to Markdown, please refer to John MacFarlane’s <span class="citation">(2006)</span> <em>Pandoc User’s Guide</em> for details. For example the use of <code>\</code> to force a line break is a Pandoc extension.</p>
<p>Another extension of note is that Pandoc will use the image title or alt-text, as specified in square brackets, to generate a caption for the figure. This means that your Stata code for generating the graph should probably not contain a title. Alternatively, you may leave the alt-text blank, or turn off captioning by ensuring that the image is not a separate paragraph, which you do by adding a backslash at the end of the line, as in <code>![alt-text](source)\</code>.</p>
<h1 id="syntax">5 Syntax</h1>
<p>The syntax of the <code>markstat</code> command is quite simple:</p>
<pre><code>markstat using filename [, pdf mathjax strict]</code></pre>
<p>The input file should have extension <code>.stmd</code>, which is short for Stata Markdown, and as usual with Stata commands it can be omitted. The sample file is called <code>auto.stmd</code> in my system, and I ran it by typing <code>markstat using auto</code>.</p>
<p>If all you want to do is generate HTML and your document does not include mathematical equations you don’t need any of the options, so I’ll provide only a brief summary here, leaving details to later sections. This also means that if you downloaded Pandoc and registered it with <code>whereis</code> you are now ready to run <code>markstat</code>.</p>
<p>The <code>pdf</code> option is used to generate a PDF document, which is done by first generating LaTeX, so it requires additional tooling as explained in §10.</p>
<p>The <code>mathjax</code> option is used to include inline and display math in a web page using the MathJax JavaScript library, see §7. The option is ignored for PDF output.</p>
<p>The <code>strict</code> option has to do with how we separate Markdown and Stata code. The “one tab or four spaces” rule is very simple and supports clean documents, but precludes some advanced Markdown options. The strict syntax uses code fences for maximum flexibility, and is described in §11.</p>
<p>The first thing the command does is <em>tangle</em> the file, extracting the Markdown and Stata blocks into separate files, which have the same name as the input file with extensions <code>.md</code> and <code>.do</code>, respectively.</p>
<p>The Markdown file has all Stata code removed, leaving placeholders of the form <code>{{n}}</code> for the <span class="math inline"><em>n</em></span>-th code chunk, which is why you should not use double braces as part of your annotations. But then, who does?</p>
<p>The command will try to convert this file to HTML or LaTeX using Pandoc, producing a file with the same name as the input and extension <code>.pdx</code>. This is a regular HTML or LaTeX file, but has a custom extension to distinguish it from the file that will incorporate Stata output later in the pipeline.</p>
<p>The Stata do file has all annotations removed. Instead it has comments of the form <code>//_n</code> to mark the start of the <span class="math inline"><em>n</em></span>-th code chunk and <code>//_^</code> to mark the end of the last chunk, so please avoid this pattern in your own comments.</p>
<p>The next thing the command does is run this file through Stata. If something goes wrong you will see the reason in the results window. The output of this step is a log file in SMCL format, with <code>.smcl</code> extension.</p>
<p>The command then <em>weaves</em> the Markdown and Stata output files, taking care to insert the output in the appropriate places in the narrative as indicated by the placeholders. This produces a file with the same name as the input file and extension <code>.html</code> for HTML and <code>.tex</code> for LaTeX.</p>
<p>If you are generating HTML you are done. Generating a PDF document requires an extra step, running <code>pdflatex</code> to convert the LaTeX file to PDF, which <code>markstat</code> does by running an external program and using a Stata LaTeX package as described below.</p>
<p>Finally <code>markstat</code> issues the Stata command <code>view browse</code> to show the final document in your default web browser or Acrobat reader.</p>
<h1 id="images">6 Images</h1>
<p>If your Stata program produced graphs and you generated HTML, the resulting file will not be self-contained because all it will have are links to the images, which will reside in your computer’s hard drive. If you were to email the file to a colleague it would be missing the images.</p>
<p>The <code>bundle</code> command, also available from the SSC archive, provides a solution. This command takes as input the name of an HTML file, goes through the code, and each time it finds a link to an image in PNG format it grabs the image file, encodes it as text using the same base 64 encoding as email attachments, and rewrites the image link to include the encoded image as URI data. By default the output file has the same name as the input with <code>-b</code> appended to indicate that it is a bundle, but there is an option to specify a different name.</p>
<p>For example to turn our fuel efficiency example into a self-contained web page we could use</p>
<pre><code>bundle using auto</code></pre>
<p>This will read <code>auto.html</code> and write <code>auto-b.html</code> with the image bundled in.</p>
<p>Another way to include images is to save the HTML file as PDF, which browsers such as Chrome will do for you. Yet another way is to read the HTML file into Word, which does a reasonably good job of parsing the code, and then save it as PDF. Still another way is to generate PDF instead of HTML, as explained in §10 below, as that will embed the images automatically.</p>
<h1 id="mathjax">7 Inline and Display Math</h1>
<p>Pandoc will take any text between dollar signs as a LaTeX formula, so you may write a regression model as <code>$y = \alpha + \beta x + e$</code>. Exactly how the equation is rendered depends on the type of output you are generating and the options in effect.</p>
<p>If you are generating HTML, Pandoc will render the equation as well as possible using Unicode characters. This is often all you need for simple equations. A more general solution is to use MathJax, which is enabled by <code>markstat</code>’s <code>mathjax</code> option.</p>
<p>MathJax is a Javascript library that can render LaTeX formulas in an HTML page with excellent results. Pandoc will let you use single dollar signs for inline math and double dollar signs for display math, just as you would in a LaTeX document, and will translate them to <code>\(</code> and <code>\)</code> for inline equations and <code>\[</code> and <code>\]</code> for display equations, which is what MathJax prefers.</p>
<p>Pandoc will also make sure that the HTML file includes a link to the MathJax script using their content distribution network (CDN). Please visit <a href="https://www.mathjax.org/">MathJax.org</a> for more information.</p>
<p>If you are generating PDF via LaTeX you can use single and double dollar signs too, and the inline and display math will be rendered natively by LaTeX.</p>
<p>When typing inline math make sure that there is no space between the equation and the opening or closing dollar signs. For example <code>$ y = \alpha + \beta x + e $</code> will not work. For display math you can include the entire expression in one line using double dollar signs, but you can also display it as</p>
<pre><code>$$ 
    y = \alpha + \beta x + e 
$$</code></pre>
<p>which I think improves readability. I found that I tend to indent the math in display equations, and of course I wouldn’t want it to be mistaken for Stata code under the “one tab or four spaces” rule, so <code>markstat</code> will suspend that rule inside display math, provided the double dollar signs are the only text in the opening and closing lines.</p>
<p>By the way the code above renders in PDF as</p>
<p><br /><span class="math display"><em>y</em> = <em>α</em> + <em>β</em><em>x</em> + <em>e</em></span><br /></p>
<p>Try generating HTML with and without the MathJax option to see what works for you.</p>
<h1 id="metadata">8 Metadata</h1>
<p>Pandoc has an option to include a document’s title, author and date as metadata. All you do is begin the document with three lines that start with a % symbol and contain the relevant information:</p>
<pre><code>% Stata Markdown
% Your Name Here
% 26 October 2016</code></pre>
<p>In LaTeX this information will populate the title, author and date macros before generating the title page. In HTML it will appear as both metatada and as headings at levels 1, 2 and 3 at the start of the document.</p>
<p>To omit the title, author or date leave the line blank except for the %. If the title is too long you may continue on extra lines, provided you start them with a space. Multiple authors may be listed separated by semi-colons and/or on continuation lines. The date may be generated using inline code as noted in §12.</p>
<p>Alternatively, you may use the YAML format to enter the metadata. See the <em>User’s Guide</em> <span class="citation">(MacFarlane 2006)</span> for more information.</p>
<h1 id="custom-styles">9 Custom Styles</h1>
<p>The <code>markstat</code> command comes with a Cascading Style Sheet (CSS) file that contains styles to be used in HTML output. The file has rules for headings, text, and of course Stata input and output blocks. It also provides styles for Pandoc-generated items such as metadata, figure environments, and figure captions. The CSS file is called <code>markstat.css</code>, will be saved in the ado path when the command is installed, and will be injected in the output when you generate HTML, so no external links are needed.</p>
<p>It is possible to customize the styles by using your own set of rules. All you have to do is define a CSS file and save it as <code>markstat.css</code> in the current directory, which is searched before the system directories. This setup also allows you to have a different style file for each project; you just use different folders, each with its own CSS file. The best way to get started is by editing the standard style.</p>
<p>All Stata input and output is rendered in HTML as preformatted text using a <code>&lt;pre&gt;</code> tag with class <code>stata</code>, with a light grey background and a border, both easily changed. The horizontal and vertical rules, corners, crossings and T-junctions typical of Stata output are rendered using Unicode versions of the original IBM drawing characters. I get best results specifying a Lucida Console font on Windows and just trusting the browser to pick a <code>monospace</code> font otherwise, with the <code>line-height</code> equal to the <code>font-size</code>. I recommend you keep these settings.</p>
<h1 id="pdf">10 Generating PDF</h1>
<p>The simplest way to generate PDF output is to first generate HTML and then have your browser save the file as PDF, or read the file into Word and save it as PDF, as noted at the end of §6 in the context of bundling figures. This may be all you need.</p>
<p>For superior results, however, there is no substitute for first generating LaTeX and then converting that to PDF, which is what the <code>pdf</code> option does. The good news is that you don’t need to learn LaTeX, as you can author your annotations in Markdown, which is much easier.</p>
<p>Unfortunately this option requires additional tooling, as you need to have access to a LaTeX-to-PDF converter, which will usually be part of a TeX installation such as MiKTeX on Windows, MacTeX on Mac OS X, or TeX Live on Unix. If you are not a LaTeX user you will need to download one of these distributions.</p>
<p>You then use the <code>whereis</code> command introduced earlier to let <code>markstat</code> know where to find <code>pdflatex</code>, typing in Stata</p>
<pre><code>whereis pdflatex full-path-to-pdflatex-executable</code></pre>
<p>substituting, of course, the path in your system. On a Windows system this may be <code>c:\Program Files (x86)\MikTeX 2.9\mixtex\bin\pdflatex.exe</code>, and on a Mac it might be <code>/usr/local/texlive/2015/bin/x86_64-darwin/pdflatex</code>, but of course the location in you system may differ. Type <code>help whereis</code> for tips locating the file.</p>
<p>You also need a Stata package used to render Stata logs in LaTeX. The file is called <code>stata.sty</code> and is available from the Stata Journal. There is a command called <code>sjlatex</code> that will install all journal files, but we only need <code>stata.sty</code>, which can be downloaded from <a href="http://www.stata-journal/production/sjlatex/stata.sty" class="uri">http://www.stata-journal/production/sjlatex/stata.sty</a>. The file may be in the current directory, but it is more convenient to copy it to your local TeX installation and then update the TeX filename database, so the package is always available. Having access to a local TeX guru may be invaluable at this stage.</p>
<p>Once these two tooling requirements have been satisfied, using the <code>pdf</code> option will cause <code>markstat</code> to tangle the input, run Pandoc to generate LaTeX from the Markdown code, run the Stata do file, ask Stata to convert the SMCL log to TeX via the <code>log texman</code> command, weave the outputs into a single LaTeX file, run <code>pdflatex</code>, and then display the PDF file in Acrobat Reader via Stata’s <code>view browse</code> command.</p>
<p>On some systems <code>pdflatex</code> may not be able to write to the PDF file if it is open in Adobe Reader, and will stop and ask for another file name. The workaround is to close the reader, and then press enter in the converter window so it can resume its work. Even better is to make a habit of closing the PDF file before re-running the <code>markstat</code> command. There are other PDF viewers that do not lock the file, but I prefer to follow Stata defaults.</p>
<p>If you are generating a PDF file the images will have been embedded automatically. For best results, however, your <code>graph export</code> command should probably generate images in PDF rather than PNG format. PDF uses a vector format, essentially instructions for drawing the image, and scales better than PNG, a raster format consisting basically of a matrix of pixels of different colors.</p>
<h1 id="strict">11 Strict Code Blocks</h1>
<p>The decision to define a Stata block by indenting each line of code one tab or four spaces produces very clean-looking input files which happen to be legal Markdown code.</p>
<p>There is, however, a small problem. The Common Markdown specification allows a list item to have more than one paragraph and/or include nested lists, with the subsequent paragraphs or lists indented one tab or four spaces. As a result our simple rule will mistake those lines for Stata commands. The workaround is simple: stick to simple lists, or read on for an alternative.</p>
<p>There is also an issue if you want to include verbatim blocks that are not intended to be run through Stata, but this problem can be solved by using <em>code fences</em>, lines with three or more backticks or tildes inserted before and after a block of code. The <code>markstat</code> parser will not treat fenced code as Stata even if indented.</p>
<p>A more general solution is to use code fences for Stata blocks themselves, coding</p>
<pre><code>```{s}
   // Stata commands here
```</code></pre>
<p>This makes the block clear and unambiguous, with the <code>{s}</code> indicating that the code is to be run through Stata. It also allows multiparagraph list items and nested lists. But it does make the input file look a bit more cluttered; which is why, in the interest of readability, this is not the default setting.</p>
<p>The <code>strict</code> option of the <code>markstat</code> command turns on Stata code fences, with the option to omit the braces, so a Stata block can start with the line <code>```{s}</code> or just <code>```</code><code>s</code> and end with the line <code>```</code>. For example the last part of our fuel efficiency example could be coded in strict mode as follows:</p>
<pre><code>The regression equation estimated by OLS is

```s
    regress gphm weight
```

Thus, a car that weighs 1,000 pounds more than another requires on
average an extra 1.4 gallons to travel 100 miles.</code></pre>
<p>When this option is in effect, indented blocks without Stata code fences will be treated as Markdown rather than Stata code, and therefore will be passed on to Pandoc for processing.</p>
<p>Code inside Stata fences may be indented to improve readability, as I did in the above example, and <code>markstat</code> will remove one level of indentation (if present) when generating the do file. Pandoc requires that fenced code blocks be separated from surrounding text by blank lines, but <code>markstat</code> makes those optional for Stata code blocks.</p>
<p>Using strict code blocks also allows you to turn off echoing the Stata commands in a code chunk, which you do by coding the opening fence<br />
as <code>```{s/}</code> with abbreviation <code>```</code><code>s/</code>. Examples are provided in §13 and §14.</p>
<p>This option may seem to run against the aim of full reproducibility of results, but it may be desirable when generating dynamic reports, where the commands themselves are of secondary interest and may safely be relegated to the <code>.stmd</code> file, which as noted in the introduction remains as a complete reproducible record of how everything was done.</p>
<p>There is no chunk option for suppressing Stata output because this can always be achieved using the <code>quietly</code> prefix. I imagine one might combine suppressing both input and output and running a script only for its side effects, which brings us to the next topic.</p>
<h1 id="inline">12 Inline Code</h1>
<p>Sometimes your annotations need to quote results. For example after running a regression you may want to quote the value of R-squared. You could, of course, type something like “The proportion of variance explained or R-squared can be read from the output as 0.0077 or less than one percent.”</p>
<p>But that risks transcription errors. We know that Stata stores R-squared as <code>e(r2)</code> and it would be nice to access the stored result. One can always add <code>display e(r2)</code> to a code block, but the result would not be spliced with the text.</p>
<p>Enter inline code, which lets you quote results using an optional format and an expression with the following syntax</p>
<pre><code>`s [fmt] expression`</code></pre>
<p>The code will extract the optional format and expression, run it through Stata using a <code>display</code> command, and then splice the output inline with the text.</p>
<p>For example we could say <code>R-squared is `</code><code>s </code><code>e(r2)`</code>, but you may not want to display R-squared to 8 decimal places, so try <code>R-squared is `</code><code>s</code><code>%5.3f e(r2)`</code> instead.</p>
<p>This feature is intended for short text. Inline code should not span multiple lines, but a line of Markdown text may include multiple inline expressions. The <code>markstat</code> command will retrieve just one line of output per expression.</p>
<p>Here is an example quoting an estimated coefficient dynamically:</p>
<pre><code>Let us regress gallons per 100 miles on weight

    regress gphm weight

A car that weights 1,000 pounds more than another will use on average an
extra `s %5.2f 1000*_b[weight]` gallons to travel 100 miles.</code></pre>
<p>The output from <code>markstat</code> with the <code>pdf</code> option will render as follows:</p>

<p>Let us regress gallons per 100 miles on weight</p>
<pre class='stata'>. regress gphm weight

      Source │       SS           df       MS      Number of obs   =        74
─────────────┼──────────────────────────────────   F(1, 72)        =    194.71
       Model │  87.2964969         1  87.2964969   Prob > F        =    0.0000
    Residual │  32.2797639        72  .448330054   R-squared       =    0.7300
─────────────┼──────────────────────────────────   Adj R-squared   =    0.7263
       Total │  119.576261        73  1.63803097   Root MSE        =    .66957

─────────────┬────────────────────────────────────────────────────────────────
        gphm │      Coef.   Std. Err.      t    P>|t|     [95% Conf. Interval]
─────────────┼────────────────────────────────────────────────────────────────
      weight │    .001407   .0001008    13.95   0.000      .001206    .0016081
       _cons │   .7707669   .3142571     2.45   0.017     .1443069    1.397227
─────────────┴────────────────────────────────────────────────────────────────
</pre>
<p>A car that weights 1,000 pounds more than another will use on average an extra  1.41 gallons to travel 100 miles.</p>
<p>It is possible to style the output of inline expressions as code by using double backticks. For example in the fuel efficiency data we could state that the variance was estimated using the <code>``</code><code>s </code><code>e(vce)``</code> method, which in this case would render as “the <code>ols</code> method”, with <code>ols</code> in a monospace font.</p>
<p>Inline code may be inserted anywhere in Markdown, including the metadata. For example the date line may read <code>% `</code><code>s </code><code>c(current_date)`</code> to insert the current date as provided by Stata’s c-class.</p>
<p>Finally, inline code may include macro evaluations and/or compound quotes. Just keep in mind that Stata macros use an opening backtick and a closing single quote, whereas inline code uses opening and closing backticks, which is how the parser can distinguish them. We’ll see an example in the next section.</p>
<h1 id="tables">13 Markdown Tables</h1>
<p>On occasion your narrative may need to include a table of results. Markdown does not have a syntax for tables, relying on HMLM markup instead, but Pandoc provides a <em>simple syntax</em> extension, best described through an example.</p>
<p>Here is code for a table showing average fuel efficiency in gallons per 100 miles for foreign and domestic cars, before and after adjusting for weight.</p>
<pre><code>Car Type      Unadjusted    Adjusted
----------  ------------  ----------
Foreign           4.31         5.46
Domestic          5.32         4.83</code></pre>
<p>Basically you line up the columns yourself. Text alignment is determined by the position of the header relative to the “underlining” below it. Our first column is left-aligned and the other two are right-aligned.</p>
<p>While pleasantly simple, this syntax will not work if we have inline code, as the expressions, their placeholders, and the final output may all have different widths. Fortunately, Pandoc has an alternative syntax, <em>pipe tables</em>, where columns are separated by the pipe character <code>|</code> and alignment is indicated by the placing of a colon in the header underlining. The previous example would look as follows:</p>
<pre><code>| Car Type | Unadjusted |  Adjusted |
|:---------|-----------:|----------:|
| Foreign  |     4.31   |    5.46   |
| Domestic |     5.32   |    4.83   |</code></pre>
<p>Now we can make the table truly dynamic. We regress gallons per 100 miles on the indicator of foreign cars and store the coefficients in a matrix. We then compute the mean weight and store it for later use. Finally we add weight to the regression model. To keep the code short I stored the baseline prediction (domestic cars of average weight) in a scalar. Because we want to display all results to just two decimal places we store a common format in a macro. This is also a good candidate for hiding all commands.</p>
<pre><code>```s/
    quietly reg gphm foreign 
    mat b = e(b) 
    quietly sum weight
    scalar mw = r(mean) 
    quietly reg gphm weight foreign 
    scalar dom = _b[_cons] + _b[weight] * mw
    local f %6.2f
```    </code></pre>

<p>We are then ready to layout the table using inline code as shown below. I lined up the pipe characters to improve readability, but that is not required, and in any case it would no longer hold after <code>markstat</code> splices the actual results.</p>
<pre><code>| Car Type | Unadjusted            | Adjusted                  | 
|:---------|----------------------:|--------------------------:| 
| Foreign  | `s `f&#39; b[1,1]+b[1,2]` | `s `f&#39; dom + _b[foreign]` |
| Domestic | `s `f&#39; b[1,2]`        | `s `f&#39; dom`               |</code></pre>
<p>This code with the <code>pdf</code> and <code>strict</code> options renders the following table:</p>
<table>
<thead>
<tr class="header">
<th align="left">Car Type</th>
<th align="right">Unadjusted</th>
<th align="right">Adjusted</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="left">Foreign</td>
<td align="right">  4.31</td>
<td align="right">  5.46</td>
</tr>
<tr class="even">
<td align="left">Domestic</td>
<td align="right">  5.32</td>
<td align="right">  4.83</td>
</tr>
</tbody>
</table>
<p>Foreign cars use less fuel than domestic cars but are also lighter; when we compare cars with the same weight, the imports use about six-tenths of a gallon more per 100 miles than comparable domestic cars.</p>
<h1 id="esttab">14 Tables of Estimates</h1>
<p>I mentioned in the introduction commands aimed at producing publication-quality tables, some of which have options to export results to LaTeX, Word or Excel. As long as they also produce standard Stata output, however, they can be used with <code>markstat</code>.</p>
<p>I will illustrate this possibility using Jann’s <span class="citation">(2007)</span> <code>esttab</code>, a nice wrapper for <code>estout</code> that works with <code>eststo</code> to store equation results. The following Stata Markdown script fits two models to the fuel efficiency data and compares them side-by-side. We use the strict syntax and suppress command echoing, to show what a dynamic summary report might look like:</p>
<pre><code>The table below shows estimated differences in fuel efficiency between
foreign and domestic cars with and without adjustment for weight, using
gallons per 100 miles as the outcome.

````s/ 
    eststo clear 
    quietly eststo: regress gphm foreign 
    quietly eststo:regress gphm foreign weight 
    esttab
```    

We see that on average foreign cars are more economical, but 
if we adjust for weight they are less fuel efficient, using 
`s %3.1f _b[foreign]` gallons *more* instead of one gallon
*less* per 100 miles.</code></pre>
<p>Running this code with the <code>pdf</code> and <code>strict</code> options produces the following output:</p>
<p>The table below shows estimated differences in fuel efficiency between foreign and domestic cars with and without adjustment for weight, using gallons per 100 miles as the outcome.</p>
<pre class='stata'>────────────────────────────────────────────
                      (1)             (2)   
                     gphm            gphm   
────────────────────────────────────────────
foreign            -1.005**         0.622** 
                  (-3.29)          (3.11)   

weight                            0.00163***
                                  (13.74)   

_cons               5.318***      -0.0735   
                  (31.92)         (-0.18)   
────────────────────────────────────────────
N                      74              74   
────────────────────────────────────────────
t statistics in parentheses
* p&lt;0.05, ** p&lt;0.01, *** p&lt;0.001
</pre>
<p>We see that on average foreign cars are more economical, but if we adjust for weight they are less fuel efficient, using 0.6 gallons <em>more</em> instead of one gallon <em>less</em> per 100 miles.</p>
<p>The <code>estout</code> command can also produce HTML and LaTeX tables, as does <code>tabout</code> <span class="citation">(Watson 2016)</span>. It is possible to include these tables in the output as long as they are in the target language, and I provide examples online.</p>
<h1 id="conclusion">15 Conclusion</h1>
<p><span class="citation">Rising (2016)</span> has a nice review of current tools for producing dynamic documents in Stata. I believe <code>markstat</code> fills all the requirements he mentions for teaching and research, such as including or hiding commands and/or results, inserting graphs, and quoting results in the narrative, and has an important advantage over other tools in the simplicity of the single-file input script.</p>
<p>In fact the overriding concern in the design of the <code>markstat</code> command has been simplicity. I wanted the input file to be easy to write and, just as importantly, easy to read, much in the spirit of Markdown itself, with minimal intrusion from the need to distinguish Stata and Markdown code.</p>
<p>I rely on a simple “one tab or four spaces” indentation rule to produce clean input, but allow fenced blocks for maximum flexibility, as well as inline code for quoting results. All the inline or block code is plain Stata, without the need for special commands. And everything outside those elements is plain Markdown.</p>
<p>I modeled the output on Stata’s own documentation and this journal. The task was made easier, at least when generating PDF output, by using the same LaTeX style. The HTML output tries to live up to that standard by taking advantage of Unicode to render horizontal and vertical rules using the original IBM drawing characters, which are available in modern monospace fonts.</p>
<p>To facilitate troubleshooting I make minimal use of temporary files, keeping all important pieces around. As noted earlier the tangle step generates a standard Stata do file, and if something goes wrong there you will soon see the cause in the results window.</p>
<p>The command also generates a standard Markdown file, but if something goes wrong with Pandoc it may be harder to detect the problem because the shell will have closed. My advice here is to run Pandoc from a terminal or command window. Producing PDF is harder because it requires LaTeX, and my troubleshooting advice again is to run <code>pdflatex</code> directly on a console to see what went wrong.</p>
<p>I have assumed that the user will be writing Stata code and Markdown annotations at the same time, but as a reviewer noted it is also possible to convert existing do files into Stata Markdown scripts, indenting the code and rewriting or expanding the comments using Markdown syntax.</p>
<p>The Stata Markdown section of my website has installation tips and a growing collection of examples. It will also include answers to frequently-asked questions, see <a href="http://data.princeton.edu/stata/markdown" class="uri">http://data.princeton.edu/stata/markdown</a>.</p>
<h1 id="acknowledgements">16 Acknowledgements</h1>
<p>I am very grateful to an anonymous reviewer for thoughtful comments that improved the presentation and its relevance to applied researchers pursuing reproducible research.</p>
<h1 id="references" class="unnumbered">17 References</h1>
<div id="refs" class="references">
<div id="ref-allaire16">
<p>Allaire, JJ, Joe Cheng, Yihui Xie, Jonathan McPherson, Winston Chang, Jeff Allen, Hadled Wickman, Aron Atkins, and Rob Hyndman. 2016. “Dynamic Documents for R.” <a href="http://rmarkdown.rstudio.com" class="uri">http://rmarkdown.rstudio.com</a>.</p>
</div>
<div id="ref-barba16">
<p>Barba, Lorena A. 2016. “The Hard Road to Reproducibility.” <em>Science</em> 354 (6308). <a href="http://science.sciencemag.org/content/354/6308/142" class="uri">http://science.sciencemag.org/content/354/6308/142</a>.</p>
</div>
<div id="ref-gallup99">
<p>Gallup, John Luke. 1999. “outreg: Stata Module to Write Estimation Tables to a Word or Tex File.” <a href="https://ideas.repec.org/c/boc/bocode/s375201.html" class="uri">https://ideas.repec.org/c/boc/bocode/s375201.html</a>.</p>
</div>
<div id="ref-gandrud15">
<p>Gangrud, Christopher. 2015. <em>Reproducible Research with R and RStudio</em>. 2nd ed. Chapman &amp; Hall/CRC.</p>
</div>
<div id="ref-gruber04">
<p>Gruber, John. 2004. “Markdown: Basics.” <a href="https://daringfireball.net/projects/markdown/basics/" class="uri">https://daringfireball.net/projects/markdown/basics/</a>.</p>
</div>
<div id="ref-haghish16">
<p>Haghish, E. F. 2016. “markdoc: Literate Programming in Stata.” <em>Stata Journal</em> 16 (4): 964–88.</p>
</div>
<div id="ref-hemken15">
<p>Hemken, Doug. 2015. “Stata and R Markdown (Windows).” <a href="http://goo.gl/QdrVn5" class="uri">http://goo.gl/QdrVn5</a>.</p>
</div>
<div id="ref-jann05">
<p>Jann, Ben. 2005. “Making Regression Tables from Stored Estimates.” <em>Stata Journal</em> 5 (3): 288–308.</p>
</div>
<div id="ref-jann07">
<p>———. 2007. “Making Regression Tables Simplified.” <em>Stata Journal</em> 7 (2): 227–44.</p>
</div>
<div id="ref-jann16t">
<p>———. 2016a. “Creating Latex Documents from Within Stata Using texdoc.” <em>Stata Journal</em> 16 (2): 245–63.</p>
</div>
<div id="ref-jann16w">
<p>———. 2016b. “webdoc: Stata Module to Create a HTML or Markdown Document Including Stata Output.” <a href="http://ideas.repec.org/c/boc/bocode/s458209.html" class="uri">http://ideas.repec.org/c/boc/bocode/s458209.html</a>.</p>
</div>
<div id="ref-knuth92">
<p>Knuth, Donald. 1992. <em>Literate Programming</em>. Stanford, CA: CSLI Lecture Notes.</p>
</div>
<div id="ref-leisch02">
<p>Leisch, F. 2002. “Sweave: Dynamic Generation of Statistical Reports Using Literate Data Analysis.” In <em>Compstat 2002. Proceedings in Computational Statistics</em>, edited by Wolfgang Härdle and Bernd Rönz, 575–80. Physika Verlag, Heidelberg, Germany.</p>
</div>
<div id="ref-macfarlane06">
<p>MacFarlane, John. 2006. “Pandoc User’s Guide.” <a href="http://pandoc.org/MANUAL.pdf" class="uri">http://pandoc.org/MANUAL.pdf</a>.</p>
</div>
<div id="ref-peng09">
<p>Peng, Roger D. 2009. “Reproducible Research and <em>Biostatistics</em>.” <em>Biostatistics</em> 10 (3): 405–8.</p>
</div>
<div id="ref-quinto12">
<p>Quintó, Llorenc, Sergi Sanz, Elisa De Lazzari, and John J. Aponte. 2012. “HTML Output in Stata.” <em>Stata Journal</em> 12 (4): 702–17. <a href="http://www.stata-journal.com/article.html?article=dm0066" class="uri">http://www.stata-journal.com/article.html?article=dm0066</a>.</p>
</div>
<div id="ref-rising16">
<p>Rising, Bill. 2016. “Dynamic Documents in Stata: Many Routes to the Same Goal.” <a href="http://www.sugm.net.au/docs/papers2016/Rising.pdf" class="uri">http://www.sugm.net.au/docs/papers2016/Rising.pdf</a>.</p>
</div>
<div id="ref-rossini01">
<p>Rossini, A. J. 2001. “Literate Statistical Practice.” In <em>DSC 2001. Proceedings of the 2nd International Workshop on Distributed Statistical Computing</em>, edited by K. Hornick and F. Leisch. <a href="http://www.R-project.org/conferences/DSC-2001" class="uri">http://www.R-project.org/conferences/DSC-2001</a>.</p>
</div>
<div id="ref-wada05">
<p>Wada, Roy. 2005. “outreg2: Stata Module to Arrange Regression Outputs into an Illustrative Table.” <a href="https://ideas.repec.org/c/boc/bocode/s456416.html" class="uri">https://ideas.repec.org/c/boc/bocode/s456416.html</a>.</p>
</div>
<div id="ref-watson16">
<p>Watson, Ian. 2016. “Publication Quality Tables in Stata. User Guide for tabout. Version 3.” <a href="http://tabout.net.au/downloads/tabout_user_guide.pdf" class="uri">http://tabout.net.au/downloads/tabout_user_guide.pdf</a>.</p>
</div>
<div id="ref-xie16">
<p>Xie, Yihui. 2016. <em>Dynamic Documents with R and Knitr</em>. 2nd ed. Chapman &amp; Hall/CRC.</p>
</div>
</div>
</body>
</html>
